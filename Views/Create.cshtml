@using System.Globalization
@using MK.BookStore.Models
@using Orchard.ContentManagement
@using Orchard.Core.Title.Models
@{
    Style.Require("Order");

    var order = (OrderRecord)Model.Order;
    var productParts = (IList<BookPart>)Model.Products;
    var invoiceAddress = Model.InvoiceAddress;
    var shippingAddress = Model.ShippingAddress;
}
<h2>@T("Order {0} has been created", order.Id + 1000)</h2>
<p>@T("Please find your order details below")</p>

<div class="order-wrapper">
    <article class="order">
        <header>
            <ul>
                <li>
                    <div class="field-label">Order Number</div>
                    <div class="field-value">@((order.Id + 1000).ToString(CultureInfo.InvariantCulture))</div>
                </li>
                <li>
                    <div class="field-label">Created</div>
                    <div class="field-value">@order.CreatedAt.ToString(CultureInfo.InvariantCulture)</div>
                </li>
            </ul>
        </header>
        <table>
            <thead>
                <tr>
                    <td>Article</td>
                    <td class="numeric">Unit Price</td>
                    <td class="numeric">Quantity</td>
                    <td class="numeric">Total Price</td>
                </tr>
            </thead>
            <tbody>
            @foreach (var detail in order.Details)
            {
                var productPart = productParts.Single(x => x.Id == detail.ProductId);
                var routePart = productPart.As<TitlePart>();
                var productTitle = routePart != null ? routePart.Title : "(No RoutePart attached)";
                <tr>
                    <td>@productTitle</td>
                    <td class="numeric">@detail.UnitPrice.ToString("c")</td>
                    <td class="numeric">@detail.Quantity</td>
                    <td class="numeric">@((detail.UnitPrice * detail.Quantity ).ToString("c"))</td>
                </tr>
            }
            </tbody>
            @{
                var subTotal = 0m;
                var vat = 0m;

                foreach (var detail in order.Details)
                {
                    //UnitPrice * Quantity
                    subTotal += detail.UnitPrice * detail.Quantity;
                    //UnitVat * Quantity
                    vat += detail.UnitPrice * detail.VatRate * detail.Quantity;
                }
                
            }
            <tfoot>
                <tr class="separator"><td colspan="4">&nbsp;</td></tr>
                <tr>
                    <td class="numeric label" colspan="2">Subtotal:</td>
                    <td class="numeric">@subTotal.ToString("c")</td>
                </tr>
                <tr>
                    <td class="numeric label" colspan="2">VAT:</td>
                    <td class="numeric">@vat.ToString("c")</td>
                </tr>
                <tr>
                    <td class="numeric label" colspan="2">Total:</td>
                    <td class="numeric">@((subTotal + vat).ToString("c"))</td>
                </tr>
            </tfoot>
        </table>
    </article>

    <article class="addresses form">
        <div class="invoice-address">
            <h2>Invoice Address</h2>
            <ul class="address-fields">
                <li>@invoiceAddress.Name.Value</li>
                <li>@invoiceAddress.AddressLine1.Value</li>
                <li>@invoiceAddress.AddressLine2.Value</li>
                <li>@invoiceAddress.Zipcode.Value</li>
                <li>@invoiceAddress.City.Value</li>
                <li>@invoiceAddress.Country.Value</li>
            </ul>
        </div>
        <div class="shipping-address">
            <h2>Shipping Address</h2>
            <ul class="address-fields">
                <li>@shippingAddress.Name.Value</li>
                <li>@shippingAddress.AddressLine1.Value</li>
                <li>@shippingAddress.AddressLine2.Value</li>
                <li>@shippingAddress.Zipcode.Value</li>
                <li>@shippingAddress.City.Value</li>
                <li>@shippingAddress.Country.Value</li>
            </ul>
        </div>
    </article>
</div>